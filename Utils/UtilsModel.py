import tensorflow as tf
import numpy as np
from PhysModel.PhysModel import *
from Utils.UtilsFunctions import *
from Utils.PhysicalConstants import *

def create_model(args, directory, best_xtbfile):
	dispersionParameters=getDispersionParameters(args)
	physModel= PhysModel (F=args.num_features,
			K=args.num_basis,
			sr_cut=args.cutoff,
			lr_cut=args.lr_cutoff,
			dtype=tf.float64 if args.dtype=='float64' else tf.float32, 
			num_scc=args.num_scc,
			em_type=args.em_type,
			num_hidden_nodes_em=args.num_hidden_nodes_em,
			num_hidden_layers_em=args.num_hidden_layers_em,
			num_blocks=args.num_blocks, 
			num_residual_atomic=args.num_residual_atomic,
			num_residual_interaction=args.num_residual_interaction,
			num_residual_output=args.num_residual_output,
			activation_fn=activation_deserialize(args.activation_function),
			energy_weight=args.energy_weight,
			force_weight=args.force_weight,
			charge_weight=args.charge_weight,
			atomic_charge_weight=args.atomic_charge_weight,
			dipole_weight=args.dipole_weight,
			drop_rate=args.drop_rate,
			use_scaled_charges=(args.use_scaled_charges==1),
			scale_shift_output=(args.scale_shift_output==1),
			use_dispersion=(args.use_dispersion==1),
			dispersionParameters=dispersionParameters,
			eem_fit_parameters=args.eem_fit_parameters,
			gfn_fit_parameters=args.gfn_fit_parameters,
			nhlambda=args.nhlambda,
			loss_type=args.loss_type,
			orbfile=args.orbfile,
			xtb_file_parameters=args.xtb_file_parameters, 
			xtb_file_best_parameters=best_xtbfile,
			xtb_working_directory=directory, 
			atomic_energies_filename=args.atomic_energies,
			nn_model=args.nn_model,
			basis_type=args.basis_type,
			electrostatic_model=args.electrostatic_model,
			Lmax=args.Lmax,
			beta=args.beta,
			num_interaction_layers=args.num_interaction_layers,
			num_output_layers=args.num_output_layers,
			num_interaction_nodes=args.num_interaction_nodes,
			num_output_nodes=args.num_output_nodes,
			repulsion_model=args.repulsion_model,
			type_output=args.type_output,
			repulsion_fit_parameters=3,
			kmax=[args.kmaxx, args.kmaxy, args.kmaxz],
			seed=args.seed)
	return physModel

def create_model_predict(args, directory, best_xtbfile):
	dispersionParameters=getDispersionParameters(args)
	physModel= PhysModel (F=args.num_features,
			K=args.num_basis,
			sr_cut=args.cutoff,
			lr_cut=args.lr_cutoff,
			dtype=tf.float64 if args.dtype=='float64' else tf.float32, 
			num_scc=args.num_scc,
			em_type=args.em_type,
			num_hidden_nodes_em=args.num_hidden_nodes_em,
			num_hidden_layers_em=args.num_hidden_layers_em,
			num_blocks=args.num_blocks, 
			num_residual_atomic=args.num_residual_atomic,
			num_residual_interaction=args.num_residual_interaction,
			num_residual_output=args.num_residual_output,
			activation_fn=activation_deserialize(args.activation_function),
			energy_weight=args.energy_weight,
			force_weight=args.force_weight,
			charge_weight=args.charge_weight,
			atomic_charge_weight=args.atomic_charge_weight,
			dipole_weight=args.dipole_weight,
			use_scaled_charges=(args.use_scaled_charges==1),
			scale_shift_output=(args.scale_shift_output==1),
			use_dispersion=(args.use_dispersion==1),
			dispersionParameters=dispersionParameters,
			orbfile=args.orbfile,
			xtb_file_best_parameters=best_xtbfile,
			xtb_working_directory=directory, 
			nn_model=args.nn_model,
			basis_type=args.basis_type,
			electrostatic_model=args.electrostatic_model,
			Lmax=args.Lmax,
			beta=args.beta,
			num_interaction_layers=args.num_interaction_layers,
			num_output_layers=args.num_output_layers,
			num_interaction_nodes=args.num_interaction_nodes,
			num_output_nodes=args.num_output_nodes,
			repulsion_model=args.repulsion_model,
			type_output=args.type_output,
			)
	return physModel
